import os
import subprocess
import shutil

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if os.geteuid() != 0:
    print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root.")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ruby_version = "3.2.2"
ruby_source_url = f"https://cache.ruby-lang.org/pub/ruby/ {ruby_version}/ruby-{ruby_version}.tar.gz"
install_path = "/usr/local"
source_dir = f"/tmp/ruby-{ruby_version}"
archive_path = "/tmp/ruby.tar.gz"
path_line = f'export PATH="$PATH:{install_path}/bin"'

def run(cmd, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    result = subprocess.run(
        cmd,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        cwd=cwd
    )
    if result.stdout:
        print(result.stdout.strip())
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {cmd}")
        raise RuntimeError(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
    return result

def check_existing_ruby():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Ruby –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    ruby_bin = os.path.join(install_path, "bin", "ruby")
    if os.path.exists(ruby_bin):
        print(f"‚ö†Ô∏è Ruby —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {install_path}")
        choice = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
        if choice != 'y':
            print("‚úÖ –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            exit(0)

def add_to_path():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –∫ Ruby –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"""
    for profile_file in ["/etc/profile", "/etc/bash.bashrc"]:
        if not os.path.exists(profile_file):
            continue
        with open(profile_file, "r") as f:
            content = f.read()
        if path_line not in content:
            print(f"‚ûï –î–æ–±–∞–≤–ª—è—é PATH –≤ {profile_file}")
            with open(profile_file, "a") as f:
                f.write(f"\n{path_line}\n")

def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üßπ –û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    if os.path.exists(source_dir):
        shutil.rmtree(source_dir)
    if os.path.exists(archive_path):
        os.remove(archive_path)

def install_ruby():
    try:
        check_existing_ruby()

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é Ruby {ruby_version}...")
        if os.path.exists(archive_path):
            print("üóÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ö–∏–≤")
        else:
            run(f"wget -O {archive_path} {ruby_source_url}")

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
        print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤...")
        if os.path.exists(source_dir):
            shutil.rmtree(source_dir)
        run(f"tar xzf {archive_path} -C /tmp")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–±–æ—Ä–∫–∞
        print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É—é –∏ —Å–æ–±–∏—Ä–∞—é Ruby...")
        run("./configure --prefix=/usr/local", cwd=source_dir)
        run("make", cwd=source_dir)
        run("make install", cwd=source_dir)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏
        add_to_path()

        # –û—á–∏—Å—Ç–∫–∞
        cleanup()

        print("üéâ Ruby —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üõ†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∞–Ω—Å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:")
        print("source /etc/profile")

    except RuntimeError as e:
        print(e)
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        cleanup()
        exit(1)
    except KeyboardInterrupt:
        print("\n‚õî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        cleanup()
        exit(1)

if __name__ == "__main__":
    install_ruby()
